package goscala

import (
	"fmt"
)

var (
	ErrZeroValue   		= fmt.Errorf("zero-value")
	ErrUnsupported 		= fmt.Errorf("unsupported")
	ErrNil         		= fmt.Errorf("nil")
	ErrEmpty			= fmt.Errorf("empty")
	ErrNotSatisfied		= fmt.Errorf("unsatisfied")
	ErrFalse			= fmt.Errorf("false")
)

type Number interface {
	type int, int8, int16, int32, int64, 
		uint, uint8, uint16, uint32, uint64, 
		float32, float64
}


type Ordered interface {
	type int, int8, int16, int32, int64,
		uint, uint8, uint16, uint32, uint64, uintptr,
		float32, float64,
		string
}

func Equal[T comparable](a, b T) bool {
	return a == b
}

//type VOrF[T any] interface {
//	type T, Func[T]
//}
//
//func GetValue[T VOrF[T]](x T) T {
//	if reflect.TypeOf(x).Kind() == reflect.Func {
//		values := reflect.ValueOf(x).Call(nil)
//		return values[0].Interface().(T)
//	}
//
//	return x
//}

